{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.10.9", "generated_at": "2025-08-27T22:48:46.105339Z", "invocation_id": "ad26ac6a-60a4-4b02-906f-af992d8e89b3", "invocation_started_at": "2025-08-27T22:48:04.491095Z", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-27T22:48:26.519632Z", "completed_at": "2025-08-27T22:48:26.543602Z"}, {"name": "execute", "started_at": "2025-08-27T22:48:26.544602Z", "completed_at": "2025-08-27T22:48:31.766961Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 5.25951075553894, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.technical_indicators.stg_price_data", "compiled": true, "compiled_code": "-- Staging model for price data\n-- This model cleans and prepares the raw data from the API\n\nSELECT \n    company_id,\n    company_name,\n    ticker,\n    currency,\n    isin,\n    CAST(date AS DATE) as date,\n    dividend_paid,\n    common_shares_outstanding,\n    last_closing_price,\n    adjusted_closing_price,\n    highest_price,\n    lowest_price,\n    opening_price,\n    trading_volume,\n    -- Add some basic calculated fields\n    (highest_price - lowest_price) as daily_range,\n    ((adjusted_closing_price - opening_price) / opening_price * 100) as daily_return_pct\nFROM \"postgres\".\"simfin_raw\".\"price\"\nWHERE date IS NOT NULL \n  AND adjusted_closing_price IS NOT NULL\n  AND trading_volume IS NOT NULL", "relation_name": "\"postgres\".\"simfin_dbt\".\"stg_price_data\"", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-08-27T22:48:31.847136Z", "completed_at": "2025-08-27T22:48:32.002626Z"}, {"name": "execute", "started_at": "2025-08-27T22:48:32.004629Z", "completed_at": "2025-08-27T22:48:36.989654Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 5.190808534622192, "adapter_response": {}, "message": "Database Error in model ema_indicators (models\\marts\\ema_indicators.sql)\n  column p.rn does not exist\n  LINE 48:         AND p.rn = e.rn + 1\n                       ^\n  HINT:  Perhaps you meant to reference the column \"e.rn\".\n  compiled code at target\\run\\technical_indicators\\models\\marts\\ema_indicators.sql", "failures": null, "unique_id": "model.technical_indicators.ema_indicators", "compiled": true, "compiled_code": "-- Exponential Moving Average (EMA) indicators\n-- Uses recursive CTEs to calculate EMAs properly\n\nWITH RECURSIVE ema_calc AS (\n    -- Base case: first row for each ticker\n    SELECT \n        *,\n        adjusted_closing_price as ema_5,\n        adjusted_closing_price as ema_10,\n        adjusted_closing_price as ema_12,\n        adjusted_closing_price as ema_20,\n        adjusted_closing_price as ema_26,\n        adjusted_closing_price as ema_50,\n        ROW_NUMBER() OVER (PARTITION BY ticker ORDER BY date) as rn\n    FROM \"postgres\".\"simfin_dbt\".\"stg_price_data\"\n    \n    UNION ALL\n    \n    -- Recursive case: calculate EMAs for subsequent rows\n    SELECT \n        p.*,\n        -- EMA 5 (smoothing factor = 2/(5+1) = 0.333)\n        p.adjusted_closing_price * 0.333 + e.ema_5 * 0.667 as ema_5,\n        -- EMA 10 (smoothing factor = 2/(10+1) = 0.182)\n        p.adjusted_closing_price * 0.182 + e.ema_10 * 0.818 as ema_10,\n        -- EMA 12 (smoothing factor = 2/(12+1) = 0.154)\n        p.adjusted_closing_price * 0.154 + e.ema_12 * 0.846 as ema_12,\n        -- EMA 20 (smoothing factor = 2/(20+1) = 0.095)\n        p.adjusted_closing_price * 0.095 + e.ema_20 * 0.905 as ema_20,\n        -- EMA 26 (smoothing factor = 2/(26+1) = 0.074)\n        p.adjusted_closing_price * 0.074 + e.ema_26 * 0.926 as ema_26,\n        -- EMA 50 (smoothing factor = 2/(50+1) = 0.039)\n        p.adjusted_closing_price * 0.039 + e.ema_50 * 0.961 as ema_50,\n        p.rn\n    FROM \"postgres\".\"simfin_dbt\".\"stg_price_data\" p\n    INNER JOIN ema_calc e ON p.ticker = e.ticker \n        AND p.rn = e.rn + 1\n)\nSELECT \n    company_id,\n    company_name,\n    ticker,\n    currency,\n    isin,\n    date,\n    dividend_paid,\n    common_shares_outstanding,\n    last_closing_price,\n    adjusted_closing_price,\n    highest_price,\n    lowest_price,\n    opening_price,\n    trading_volume,\n    daily_range,\n    daily_return_pct,\n    ema_5,\n    ema_10,\n    ema_12,\n    ema_20,\n    ema_26,\n    ema_50\nFROM ema_calc\nORDER BY ticker, date", "relation_name": "\"postgres\".\"simfin_dbt\".\"ema_indicators\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-27T22:48:31.873134Z", "completed_at": "2025-08-27T22:48:32.093388Z"}, {"name": "execute", "started_at": "2025-08-27T22:48:32.138139Z", "completed_at": "2025-08-27T22:48:37.382517Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 5.558830499649048, "adapter_response": {"_message": "SELECT 7544", "code": "SELECT", "rows_affected": 7544}, "message": "SELECT 7544", "failures": null, "unique_id": "model.technical_indicators.rsi_indicators", "compiled": true, "compiled_code": "-- RSI (Relative Strength Index) indicators\n-- Calculates RSI for various periods\n\nWITH price_changes AS (\n    SELECT \n        *,\n        adjusted_closing_price - LAG(adjusted_closing_price) OVER (\n            PARTITION BY ticker ORDER BY date\n        ) as price_change\n    FROM \"postgres\".\"simfin_dbt\".\"stg_price_data\"\n),\nrsi_calc AS (\n    SELECT \n        *,\n        CASE WHEN price_change > 0 THEN price_change ELSE 0 END as gain,\n        CASE WHEN price_change < 0 THEN ABS(price_change) ELSE 0 END as loss\n    FROM price_changes\n),\nrsi_final AS (\n    SELECT \n        *,\n        -- RSI 14 (most common)\n        AVG(gain) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\n        ) as avg_gain_14,\n        AVG(loss) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\n        ) as avg_loss_14,\n        -- RSI 7 (shorter period)\n        AVG(gain) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\n        ) as avg_gain_7,\n        AVG(loss) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\n        ) as avg_loss_7,\n        -- RSI 21 (longer period)\n        AVG(gain) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 20 PRECEDING AND CURRENT ROW\n        ) as avg_gain_21,\n        AVG(loss) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 20 PRECEDING AND CURRENT ROW\n        ) as avg_loss_21\n    FROM rsi_calc\n)\nSELECT \n    company_id,\n    company_name,\n    ticker,\n    currency,\n    isin,\n    date,\n    dividend_paid,\n    common_shares_outstanding,\n    last_closing_price,\n    adjusted_closing_price,\n    highest_price,\n    lowest_price,\n    opening_price,\n    trading_volume,\n    daily_range,\n    daily_return_pct,\n    price_change,\n    -- RSI calculations\n    CASE \n        WHEN avg_loss_7 = 0 THEN 100\n        ELSE 100 - (100 / (1 + (avg_gain_7 / avg_loss_7)))\n    END as rsi_7,\n    CASE \n        WHEN avg_loss_14 = 0 THEN 100\n        ELSE 100 - (100 / (1 + (avg_gain_14 / avg_loss_14)))\n    END as rsi_14,\n    CASE \n        WHEN avg_loss_21 = 0 THEN 100\n        ELSE 100 - (100 / (1 + (avg_gain_21 / avg_loss_21)))\n    END as rsi_21\nFROM rsi_final\nORDER BY ticker, date", "relation_name": "\"postgres\".\"simfin_dbt\".\"rsi_indicators\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-27T22:48:31.859134Z", "completed_at": "2025-08-27T22:48:32.018679Z"}, {"name": "execute", "started_at": "2025-08-27T22:48:32.020682Z", "completed_at": "2025-08-27T22:48:37.566460Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 5.76906681060791, "adapter_response": {"_message": "SELECT 7544", "code": "SELECT", "rows_affected": 7544}, "message": "SELECT 7544", "failures": null, "unique_id": "model.technical_indicators.macd_indicators", "compiled": true, "compiled_code": "-- MACD (Moving Average Convergence Divergence) indicators\n-- Calculates MACD line, signal line, and histogram\n\nWITH ema_calc AS (\n    SELECT \n        *,\n        -- Fast EMA (12 periods)\n        CASE \n            WHEN ROW_NUMBER() OVER (PARTITION BY ticker ORDER BY date) = 1 \n            THEN adjusted_closing_price\n            ELSE adjusted_closing_price * (2.0/13.0) + \n                 LAG(adjusted_closing_price) OVER (PARTITION BY ticker ORDER BY date) * (11.0/13.0)\n        END as ema_12,\n        -- Slow EMA (26 periods)\n        CASE \n            WHEN ROW_NUMBER() OVER (PARTITION BY ticker ORDER BY date) = 1 \n            THEN adjusted_closing_price\n            ELSE adjusted_closing_price * (2.0/27.0) + \n                 LAG(adjusted_closing_price) OVER (PARTITION BY ticker ORDER BY date) * (25.0/27.0)\n        END as ema_26\n    FROM \"postgres\".\"simfin_dbt\".\"stg_price_data\"\n),\nmacd_calc AS (\n    SELECT \n        *,\n        ema_12 - ema_26 as macd_line\n    FROM ema_calc\n),\nmacd_signal AS (\n    SELECT \n        *,\n        -- Signal line (9-period EMA of MACD)\n        CASE \n            WHEN ROW_NUMBER() OVER (PARTITION BY ticker ORDER BY date) = 1 \n            THEN macd_line\n            ELSE macd_line * (2.0/10.0) + \n                 LAG(macd_line) OVER (PARTITION BY ticker ORDER BY date) * (8.0/10.0)\n        END as macd_signal\n    FROM macd_calc\n)\nSELECT \n    company_id,\n    company_name,\n    ticker,\n    currency,\n    isin,\n    date,\n    dividend_paid,\n    common_shares_outstanding,\n    last_closing_price,\n    adjusted_closing_price,\n    highest_price,\n    lowest_price,\n    opening_price,\n    trading_volume,\n    daily_range,\n    daily_return_pct,\n    ema_12,\n    ema_26,\n    macd_line,\n    macd_signal,\n    macd_line - macd_signal as macd_histogram,\n    -- MACD percentage\n    CASE \n        WHEN LAG(macd_line) OVER (PARTITION BY ticker ORDER BY date) = 0 THEN 0\n        ELSE ((macd_line - LAG(macd_line) OVER (PARTITION BY ticker ORDER BY date)) / \n               LAG(macd_line) OVER (PARTITION BY ticker ORDER BY date)) * 100\n    END as macd_percentage\nFROM macd_signal\nORDER BY ticker, date", "relation_name": "\"postgres\".\"simfin_dbt\".\"macd_indicators\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-27T22:48:31.836133Z", "completed_at": "2025-08-27T22:48:32.066120Z"}, {"name": "execute", "started_at": "2025-08-27T22:48:32.125141Z", "completed_at": "2025-08-27T22:48:37.782542Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 5.965785980224609, "adapter_response": {"_message": "SELECT 7544", "code": "SELECT", "rows_affected": 7544}, "message": "SELECT 7544", "failures": null, "unique_id": "model.technical_indicators.bollinger_bands", "compiled": true, "compiled_code": "-- Bollinger Bands indicators\n-- Calculates upper, middle, and lower bands with standard deviation\n\nSELECT \n    *,\n    -- Middle band (20-period SMA)\n    AVG(adjusted_closing_price) OVER (\n        PARTITION BY ticker \n        ORDER BY date \n        ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n    ) as bb_middle_20,\n    \n    -- Upper band (middle + 2 standard deviations)\n    AVG(adjusted_closing_price) OVER (\n        PARTITION BY ticker \n        ORDER BY date \n        ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n    ) + (2 * STDDEV(adjusted_closing_price) OVER (\n        PARTITION BY ticker \n        ORDER BY date \n        ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n    )) as bb_upper_20,\n    \n    -- Lower band (middle - 2 standard deviations)\n    AVG(adjusted_closing_price) OVER (\n        PARTITION BY ticker \n        ORDER BY date \n        ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n    ) - (2 * STDDEV(adjusted_closing_price) OVER (\n        PARTITION BY ticker \n        ORDER BY date \n        ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n    )) as bb_lower_20,\n    \n    -- Bollinger Band Width (upper - lower)\n    (AVG(adjusted_closing_price) OVER (\n        PARTITION BY ticker \n        ORDER BY date \n        ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n    ) + (2 * STDDEV(adjusted_closing_price) OVER (\n        PARTITION BY ticker \n        ORDER BY date \n        ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n    ))) - (AVG(adjusted_closing_price) OVER (\n        PARTITION BY ticker \n        ORDER BY date \n        ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n    ) - (2 * STDDEV(adjusted_closing_price) OVER (\n        PARTITION BY ticker \n        ORDER BY date \n        ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n    ))) as bb_width_20,\n    \n    -- %B (position within bands)\n    CASE \n        WHEN (AVG(adjusted_closing_price) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n        ) + (2 * STDDEV(adjusted_closing_price) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n        ))) - (AVG(adjusted_closing_price) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n        ) - (2 * STDDEV(adjusted_closing_price) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n        ))) = 0 THEN 0\n        ELSE (adjusted_closing_price - (AVG(adjusted_closing_price) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n        ) - (2 * STDDEV(adjusted_closing_price) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n        )))) / ((AVG(adjusted_closing_price) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n        ) + (2 * STDDEV(adjusted_closing_price) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n        ))) - (AVG(adjusted_closing_price) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n        ) - (2 * STDDEV(adjusted_closing_price) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n        ))))\n    END as bb_percent_b_20\n\nFROM \"postgres\".\"simfin_dbt\".\"stg_price_data\"", "relation_name": "\"postgres\".\"simfin_dbt\".\"bollinger_bands\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-27T22:48:37.027942Z", "completed_at": "2025-08-27T22:48:37.041944Z"}, {"name": "execute", "started_at": "2025-08-27T22:48:37.043943Z", "completed_at": "2025-08-27T22:48:41.976926Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 4.959458351135254, "adapter_response": {"_message": "SELECT 7544", "code": "SELECT", "rows_affected": 7544}, "message": "SELECT 7544", "failures": null, "unique_id": "model.technical_indicators.sma_indicators", "compiled": true, "compiled_code": "-- Simple Moving Average (SMA) indicators\n-- Calculates various period SMAs for price analysis\n\nSELECT \n    *,\n    -- 5-day SMA\n    AVG(adjusted_closing_price) OVER (\n        PARTITION BY ticker \n        ORDER BY date \n        ROWS BETWEEN 4 PRECEDING AND CURRENT ROW\n    ) as sma_5,\n    \n    -- 10-day SMA\n    AVG(adjusted_closing_price) OVER (\n        PARTITION BY ticker \n        ORDER BY date \n        ROWS BETWEEN 9 PRECEDING AND CURRENT ROW\n    ) as sma_10,\n    \n    -- 20-day SMA (commonly used)\n    AVG(adjusted_closing_price) OVER (\n        PARTITION BY ticker \n        ORDER BY date \n        ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n    ) as sma_20,\n    \n    -- 50-day SMA\n    AVG(adjusted_closing_price) OVER (\n        PARTITION BY ticker \n        ORDER BY date \n        ROWS BETWEEN 49 PRECEDING AND CURRENT ROW\n    ) as sma_50,\n    \n    -- 200-day SMA (long-term trend)\n    AVG(adjusted_closing_price) OVER (\n        PARTITION BY ticker \n        ORDER BY date \n        ROWS BETWEEN 199 PRECEDING AND CURRENT ROW\n    ) as sma_200,\n    \n    -- Volume SMA for comparison\n    AVG(trading_volume) OVER (\n        PARTITION BY ticker \n        ORDER BY date \n        ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n    ) as volume_sma_20\n\nFROM \"postgres\".\"simfin_dbt\".\"stg_price_data\"", "relation_name": "\"postgres\".\"simfin_dbt\".\"sma_indicators\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-27T22:48:37.394960Z", "completed_at": "2025-08-27T22:48:37.406960Z"}, {"name": "execute", "started_at": "2025-08-27T22:48:37.407961Z", "completed_at": "2025-08-27T22:48:41.979942Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 4.592190742492676, "adapter_response": {"_message": "SELECT 7544", "code": "SELECT", "rows_affected": 7544}, "message": "SELECT 7544", "failures": null, "unique_id": "model.technical_indicators.vwap_indicators", "compiled": true, "compiled_code": "-- VWAP (Volume Weighted Average Price) indicators\n-- Calculates VWAP and related volume metrics\n\nSELECT \n    *,\n    -- VWAP (cumulative)\n    SUM(adjusted_closing_price * trading_volume) OVER (\n        PARTITION BY ticker \n        ORDER BY date \n        ROWS UNBOUNDED PRECEDING\n    ) / SUM(trading_volume) OVER (\n        PARTITION BY ticker \n        ORDER BY date \n        ROWS UNBOUNDED PRECEDING\n    ) as vwap_cumulative,\n    \n    -- 20-period VWAP\n    SUM(adjusted_closing_price * trading_volume) OVER (\n        PARTITION BY ticker \n        ORDER BY date \n        ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n    ) / SUM(trading_volume) OVER (\n        PARTITION BY ticker \n        ORDER BY date \n        ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n    ) as vwap_20,\n    \n    -- Volume SMA for comparison\n    AVG(trading_volume) OVER (\n        PARTITION BY ticker \n        ORDER BY date \n        ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n    ) as volume_sma_20,\n    \n    -- Volume ratio (current volume vs 20-period average)\n    CASE \n        WHEN AVG(trading_volume) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n        ) = 0 THEN 0\n        ELSE trading_volume / AVG(trading_volume) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n        )\n    END as volume_ratio_20,\n    \n    -- Price vs VWAP\n    CASE \n        WHEN SUM(adjusted_closing_price * trading_volume) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n        ) / SUM(trading_volume) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n        ) = 0 THEN 0\n        ELSE ((adjusted_closing_price - (SUM(adjusted_closing_price * trading_volume) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n        ) / SUM(trading_volume) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n        ))) / (SUM(adjusted_closing_price * trading_volume) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n        ) / SUM(trading_volume) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n        ))) * 100\n    END as price_vs_vwap_pct\n\nFROM \"postgres\".\"simfin_dbt\".\"stg_price_data\"", "relation_name": "\"postgres\".\"simfin_dbt\".\"vwap_indicators\"", "batch_results": null}, {"status": "skipped", "timing": [], "thread_id": "MainThread", "execution_time": 0, "adapter_response": {}, "message": "Skipping due to fail_fast", "failures": null, "unique_id": "model.technical_indicators.consolidated_indicators", "compiled": false, "compiled_code": null, "relation_name": "\"postgres\".\"simfin_dbt\".\"consolidated_indicators\"", "batch_results": null}], "elapsed_time": 39.71787071228027, "args": {"show_resource_report": false, "print": false, "require_resource_names_without_spaces": true, "exclude": [], "write_json": true, "upload_to_artifacts_ingest_api": false, "use_fast_test_edges": false, "log_level_file": "debug", "log_path": "C:\\Users\\Administrator\\Downloads\\dom\\logs", "strict_mode": false, "invocation_command": "dbt ", "log_format": "default", "empty": false, "introspect": true, "require_batched_execution_for_custom_microbatch_strategy": false, "source_freshness_run_project_hooks": true, "log_file_max_bytes": 10485760, "state_modified_compare_more_unrendered_values": false, "use_colors_file": true, "project_dir": "C:\\Users\\Administrator\\Downloads\\dom", "use_colors": true, "which": "run", "static_parser": true, "vars": {"source_dataset_name": "simfin_dbt"}, "profiles_dir": "C:\\Users\\Administrator\\Downloads\\dom\\.venv\\Lib\\site-packages\\dlt\\helpers\\dbt", "require_generic_test_arguments_property": true, "favor_state": false, "defer": false, "printer_width": 80, "indirect_selection": "eager", "skip_nodes_if_on_run_start_fails": false, "profile": "postgres", "fail_fast": true, "require_yaml_configuration_for_mf_time_spines": false, "macro_debugging": false, "show_all_deprecations": false, "populate_cache": true, "select": [], "warn_error_options": {"error": [], "warn": [], "silence": []}, "log_level": "info", "partial_parse": true, "partial_parse_file_diff": true, "log_format_file": "debug", "require_all_warnings_handled_by_warn_error": false, "require_explicit_package_overrides_for_builtin_materializations": true, "state_modified_compare_vars": false, "quiet": true, "cache_selected_only": false, "validate_macro_args": false, "version_check": true, "require_nested_cumulative_type_params": false, "send_anonymous_usage_stats": false}}