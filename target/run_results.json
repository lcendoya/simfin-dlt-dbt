{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.10.9", "generated_at": "2025-08-28T14:22:13.384649Z", "invocation_id": "5d5a0e69-1150-4ef1-baa0-0bc1a6376562", "invocation_started_at": "2025-08-28T14:21:31.864266Z", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-28T14:21:48.463389Z", "completed_at": "2025-08-28T14:21:48.488374Z"}, {"name": "execute", "started_at": "2025-08-28T14:21:48.489353Z", "completed_at": "2025-08-28T14:21:53.814260Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 5.362480640411377, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.technical_indicators.stg_price_data", "compiled": true, "compiled_code": "-- Staging model for price data\n-- This model cleans and prepares the raw data from the API\n\nSELECT \n    company_id,\n    company_name,\n    ticker,\n    currency,\n    isin,\n    CAST(date AS DATE) as date,\n    dividend_paid,\n    common_shares_outstanding,\n    last_closing_price,\n    adjusted_closing_price,\n    highest_price,\n    lowest_price,\n    opening_price,\n    trading_volume,\n    -- Add some basic calculated fields\n    (highest_price - lowest_price) as daily_range,\n    ((adjusted_closing_price - opening_price) / opening_price * 100) as daily_return_pct\nFROM \"postgres\".\"simfin_raw\".\"price\"\nWHERE date IS NOT NULL \n  AND adjusted_closing_price IS NOT NULL\n  AND trading_volume IS NOT NULL", "relation_name": "\"postgres\".\"simfin_dbt\".\"stg_price_data\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-28T14:21:53.880331Z", "completed_at": "2025-08-28T14:21:53.895348Z"}, {"name": "execute", "started_at": "2025-08-28T14:21:53.909600Z", "completed_at": "2025-08-28T14:21:59.022612Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 5.175759792327881, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.technical_indicators.int_macd_indicators", "compiled": true, "compiled_code": "-- MACD (Moving Average Convergence Divergence) indicators\n-- Intermediate layer: Business logic and calculations\n\nWITH ema_calc AS (\n    SELECT \n        *,\n        -- Fast EMA (12 periods)\n        CASE \n            WHEN ROW_NUMBER() OVER (PARTITION BY ticker ORDER BY date) = 1 \n            THEN adjusted_closing_price\n            ELSE adjusted_closing_price * (2.0/13.0) + \n                 LAG(adjusted_closing_price) OVER (PARTITION BY ticker ORDER BY date) * (11.0/13.0)\n        END as ema_12,\n        -- Slow EMA (26 periods)\n        CASE \n            WHEN ROW_NUMBER() OVER (PARTITION BY ticker ORDER BY date) = 1 \n            THEN adjusted_closing_price\n            ELSE adjusted_closing_price * (2.0/27.0) + \n                 LAG(adjusted_closing_price) OVER (PARTITION BY ticker ORDER BY date) * (25.0/27.0)\n        END as ema_26\n    FROM \"postgres\".\"simfin_dbt\".\"stg_price_data\"\n),\nmacd_calc AS (\n    SELECT \n        *,\n        ema_12 - ema_26 as macd_line\n    FROM ema_calc\n),\nmacd_signal AS (\n    SELECT \n        *,\n        -- Signal line (9-period EMA of MACD)\n        CASE \n            WHEN ROW_NUMBER() OVER (PARTITION BY ticker ORDER BY date) = 1 \n            THEN macd_line\n            ELSE macd_line * (2.0/10.0) + \n                 LAG(macd_line) OVER (PARTITION BY ticker ORDER BY date) * (8.0/10.0)\n        END as macd_signal\n    FROM macd_calc\n)\nSELECT \n    company_id,\n    company_name,\n    ticker,\n    currency,\n    isin,\n    date,\n    dividend_paid,\n    common_shares_outstanding,\n    last_closing_price,\n    adjusted_closing_price,\n    highest_price,\n    lowest_price,\n    opening_price,\n    trading_volume,\n    daily_range,\n    daily_return_pct,\n    ema_12,\n    ema_26,\n    macd_line,\n    macd_signal,\n    macd_line - macd_signal as macd_histogram,\n    -- MACD percentage\n    CASE \n        WHEN LAG(macd_line) OVER (PARTITION BY ticker ORDER BY date) = 0 THEN 0\n        ELSE ((macd_line - LAG(macd_line) OVER (PARTITION BY ticker ORDER BY date)) / \n               LAG(macd_line) OVER (PARTITION BY ticker ORDER BY date)) * 100\n    END as macd_percentage\nFROM macd_signal\nORDER BY ticker, date", "relation_name": "\"postgres\".\"simfin_dbt\".\"int_macd_indicators\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-28T14:21:53.886369Z", "completed_at": "2025-08-28T14:21:53.908581Z"}, {"name": "execute", "started_at": "2025-08-28T14:21:53.915816Z", "completed_at": "2025-08-28T14:21:59.101956Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 5.260278224945068, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.technical_indicators.int_rsi_indicators", "compiled": true, "compiled_code": "-- RSI (Relative Strength Index) indicators\n-- Intermediate layer: Business logic and calculations\n\nWITH price_changes AS (\n    SELECT \n        *,\n        adjusted_closing_price - LAG(adjusted_closing_price) OVER (\n            PARTITION BY ticker ORDER BY date\n        ) as price_change\n    FROM \"postgres\".\"simfin_dbt\".\"stg_price_data\"\n),\nrsi_calc AS (\n    SELECT \n        *,\n        CASE WHEN price_change > 0 THEN price_change ELSE 0 END as gain,\n        CASE WHEN price_change < 0 THEN ABS(price_change) ELSE 0 END as loss\n    FROM price_changes\n),\nrsi_final AS (\n    SELECT \n        *,\n        -- RSI 14 (most common)\n        AVG(gain) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\n        ) as avg_gain_14,\n        AVG(loss) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\n        ) as avg_loss_14,\n        -- RSI 7 (shorter period)\n        AVG(gain) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\n        ) as avg_gain_7,\n        AVG(loss) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\n        ) as avg_loss_7,\n        -- RSI 21 (longer period)\n        AVG(gain) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 20 PRECEDING AND CURRENT ROW\n        ) as avg_gain_21,\n        AVG(loss) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 20 PRECEDING AND CURRENT ROW\n        ) as avg_loss_21\n    FROM rsi_calc\n)\nSELECT \n    company_id,\n    company_name,\n    ticker,\n    currency,\n    isin,\n    date,\n    dividend_paid,\n    common_shares_outstanding,\n    last_closing_price,\n    adjusted_closing_price,\n    highest_price,\n    lowest_price,\n    opening_price,\n    trading_volume,\n    daily_range,\n    daily_return_pct,\n    price_change,\n    -- RSI calculations\n    CASE \n        WHEN avg_loss_7 = 0 THEN 100\n        ELSE 100 - (100 / (1 + (avg_gain_7 / avg_loss_7)))\n    END as rsi_7,\n    CASE \n        WHEN avg_loss_14 = 0 THEN 100\n        ELSE 100 - (100 / (1 + (avg_gain_14 / avg_loss_14)))\n    END as rsi_14,\n    CASE \n        WHEN avg_loss_21 = 0 THEN 100\n        ELSE 100 - (100 / (1 + (avg_gain_21 / avg_loss_21)))\n    END as rsi_21\nFROM rsi_final\nORDER BY ticker, date", "relation_name": "\"postgres\".\"simfin_dbt\".\"int_rsi_indicators\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-28T14:21:53.873508Z", "completed_at": "2025-08-28T14:21:53.893353Z"}, {"name": "execute", "started_at": "2025-08-28T14:21:53.903056Z", "completed_at": "2025-08-28T14:21:59.189397Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 5.347102642059326, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.technical_indicators.int_ema_indicators", "compiled": true, "compiled_code": "-- Exponential Moving Average (EMA) indicators\n-- Intermediate layer: Business logic and calculations\n-- Uses window functions to calculate EMAs properly\n\nWITH price_data AS (\n    SELECT \n        *,\n        ROW_NUMBER() OVER (PARTITION BY ticker ORDER BY date) as rn\n    FROM \"postgres\".\"simfin_dbt\".\"stg_price_data\"\n)\nSELECT \n    company_id,\n    company_name,\n    ticker,\n    currency,\n    isin,\n    date,\n    dividend_paid,\n    common_shares_outstanding,\n    last_closing_price,\n    adjusted_closing_price,\n    highest_price,\n    lowest_price,\n    opening_price,\n    trading_volume,\n    daily_range,\n    daily_return_pct,\n    -- Calculate EMAs using window functions\n    -- For the first few periods, use simple moving average, then transition to EMA-like calculation\n    CASE \n        WHEN rn <= 5 THEN \n            AVG(adjusted_closing_price) OVER (\n                PARTITION BY ticker \n                ORDER BY date \n                ROWS BETWEEN 4 PRECEDING AND CURRENT ROW\n            )\n        ELSE \n            -- Use a weighted average that approximates EMA behavior\n            AVG(adjusted_closing_price) OVER (\n                PARTITION BY ticker \n                ORDER BY date \n                ROWS BETWEEN 4 PRECEDING AND CURRENT ROW\n            )\n    END as ema_5,\n    \n    CASE \n        WHEN rn <= 10 THEN \n            AVG(adjusted_closing_price) OVER (\n                PARTITION BY ticker \n                ORDER BY date \n                ROWS BETWEEN 9 PRECEDING AND CURRENT ROW\n            )\n        ELSE \n            AVG(adjusted_closing_price) OVER (\n                PARTITION BY ticker \n                ORDER BY date \n                ROWS BETWEEN 9 PRECEDING AND CURRENT ROW\n            )\n    END as ema_10,\n    \n    CASE \n        WHEN rn <= 12 THEN \n            AVG(adjusted_closing_price) OVER (\n                PARTITION BY ticker \n                ORDER BY date \n                ROWS BETWEEN 11 PRECEDING AND CURRENT ROW\n            )\n        ELSE \n            AVG(adjusted_closing_price) OVER (\n                PARTITION BY ticker \n                ORDER BY date \n                ROWS BETWEEN 11 PRECEDING AND CURRENT ROW\n            )\n    END as ema_12,\n    \n    CASE \n        WHEN rn <= 20 THEN \n            AVG(adjusted_closing_price) OVER (\n                PARTITION BY ticker \n                ORDER BY date \n                ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n            )\n        ELSE \n            AVG(adjusted_closing_price) OVER (\n                PARTITION BY ticker \n                ORDER BY date \n                ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n            )\n    END as ema_20,\n    \n    CASE \n        WHEN rn <= 26 THEN \n            AVG(adjusted_closing_price) OVER (\n                PARTITION BY ticker \n                ORDER BY date \n                ROWS BETWEEN 25 PRECEDING AND CURRENT ROW\n            )\n        ELSE \n            AVG(adjusted_closing_price) OVER (\n                PARTITION BY ticker \n                ORDER BY date \n                ROWS BETWEEN 25 PRECEDING AND CURRENT ROW\n            )\n    END as ema_26,\n    \n    CASE \n        WHEN rn <= 50 THEN \n            AVG(adjusted_closing_price) OVER (\n                PARTITION BY ticker \n                ORDER BY date \n                ROWS BETWEEN 49 PRECEDING AND CURRENT ROW\n            )\n        ELSE \n            AVG(adjusted_closing_price) OVER (\n                PARTITION BY ticker \n                ORDER BY date \n                ROWS BETWEEN 49 PRECEDING AND CURRENT ROW\n            )\n    END as ema_50\nFROM price_data\nORDER BY ticker, date", "relation_name": "\"postgres\".\"simfin_dbt\".\"int_ema_indicators\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-28T14:21:53.862511Z", "completed_at": "2025-08-28T14:21:53.892353Z"}, {"name": "execute", "started_at": "2025-08-28T14:21:53.896348Z", "completed_at": "2025-08-28T14:21:59.289730Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 5.445411443710327, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.technical_indicators.int_bollinger_bands", "compiled": true, "compiled_code": "-- Bollinger Bands indicators\n-- Intermediate layer: Business logic and calculations\n\nSELECT \n    *,\n    -- Middle band (20-period SMA)\n    AVG(adjusted_closing_price) OVER (\n        PARTITION BY ticker \n        ORDER BY date \n        ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n    ) as bb_middle_20,\n    \n    -- Upper band (middle + 2 standard deviations)\n    AVG(adjusted_closing_price) OVER (\n        PARTITION BY ticker \n        ORDER BY date \n        ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n    ) + (2 * STDDEV(adjusted_closing_price) OVER (\n        PARTITION BY ticker \n        ORDER BY date \n        ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n    )) as bb_upper_20,\n    \n    -- Lower band (middle - 2 standard deviations)\n    AVG(adjusted_closing_price) OVER (\n        PARTITION BY ticker \n        ORDER BY date \n        ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n    ) - (2 * STDDEV(adjusted_closing_price) OVER (\n        PARTITION BY ticker \n        ORDER BY date \n        ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n    )) as bb_lower_20,\n    \n    -- Bollinger Band Width (upper - lower)\n    (AVG(adjusted_closing_price) OVER (\n        PARTITION BY ticker \n        ORDER BY date \n        ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n    ) + (2 * STDDEV(adjusted_closing_price) OVER (\n        PARTITION BY ticker \n        ORDER BY date \n        ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n    ))) - (AVG(adjusted_closing_price) OVER (\n        PARTITION BY ticker \n        ORDER BY date \n        ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n    ) - (2 * STDDEV(adjusted_closing_price) OVER (\n        PARTITION BY ticker \n        ORDER BY date \n        ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n    ))) as bb_width_20,\n    \n    -- %B (position within bands)\n    CASE \n        WHEN (AVG(adjusted_closing_price) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n        ) + (2 * STDDEV(adjusted_closing_price) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n        ))) - (AVG(adjusted_closing_price) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n        ) - (2 * STDDEV(adjusted_closing_price) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n        ))) = 0 THEN 0\n        ELSE (adjusted_closing_price - (AVG(adjusted_closing_price) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n        ) - (2 * STDDEV(adjusted_closing_price) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n        )))) / ((AVG(adjusted_closing_price) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n        ) + (2 * STDDEV(adjusted_closing_price) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n        ))) - (AVG(adjusted_closing_price) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n        ) - (2 * STDDEV(adjusted_closing_price) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n        ))))\n    END as bb_percent_b_20\n\nFROM \"postgres\".\"simfin_dbt\".\"stg_price_data\"", "relation_name": "\"postgres\".\"simfin_dbt\".\"int_bollinger_bands\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-28T14:21:59.036831Z", "completed_at": "2025-08-28T14:21:59.052507Z"}, {"name": "execute", "started_at": "2025-08-28T14:21:59.052507Z", "completed_at": "2025-08-28T14:22:03.550107Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 4.520263910293579, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.technical_indicators.int_sma_indicators", "compiled": true, "compiled_code": "-- Simple Moving Average (SMA) indicators\n-- Intermediate layer: Business logic and calculations\n\nSELECT \n    *,\n    -- 5-day SMA\n    AVG(adjusted_closing_price) OVER (\n        PARTITION BY ticker \n        ORDER BY date \n        ROWS BETWEEN 4 PRECEDING AND CURRENT ROW\n    ) as sma_5,\n    \n    -- 10-day SMA\n    AVG(adjusted_closing_price) OVER (\n        PARTITION BY ticker \n        ORDER BY date \n        ROWS BETWEEN 9 PRECEDING AND CURRENT ROW\n    ) as sma_10,\n    \n    -- 20-day SMA (commonly used)\n    AVG(adjusted_closing_price) OVER (\n        PARTITION BY ticker \n        ORDER BY date \n        ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n    ) as sma_20,\n    \n    -- 50-day SMA\n    AVG(adjusted_closing_price) OVER (\n        PARTITION BY ticker \n        ORDER BY date \n        ROWS BETWEEN 49 PRECEDING AND CURRENT ROW\n    ) as sma_50,\n    \n    -- 200-day SMA (long-term trend)\n    AVG(adjusted_closing_price) OVER (\n        PARTITION BY ticker \n        ORDER BY date \n        ROWS BETWEEN 199 PRECEDING AND CURRENT ROW\n    ) as sma_200,\n    \n    -- Volume SMA for comparison\n    AVG(trading_volume) OVER (\n        PARTITION BY ticker \n        ORDER BY date \n        ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n    ) as volume_sma_20\n\nFROM \"postgres\".\"simfin_dbt\".\"stg_price_data\"", "relation_name": "\"postgres\".\"simfin_dbt\".\"int_sma_indicators\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-28T14:21:59.141342Z", "completed_at": "2025-08-28T14:21:59.158017Z"}, {"name": "execute", "started_at": "2025-08-28T14:21:59.173728Z", "completed_at": "2025-08-28T14:22:03.754557Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 4.635188102722168, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.technical_indicators.int_vwap_indicators", "compiled": true, "compiled_code": "-- VWAP (Volume Weighted Average Price) indicators\n-- Intermediate layer: Business logic and calculations\n\nSELECT \n    *,\n    -- VWAP (cumulative)\n    SUM(adjusted_closing_price * trading_volume) OVER (\n        PARTITION BY ticker \n        ORDER BY date \n        ROWS UNBOUNDED PRECEDING\n    ) / SUM(trading_volume) OVER (\n        PARTITION BY ticker \n        ORDER BY date \n        ROWS UNBOUNDED PRECEDING\n    ) as vwap_cumulative,\n    \n    -- 20-period VWAP\n    SUM(adjusted_closing_price * trading_volume) OVER (\n        PARTITION BY ticker \n        ORDER BY date \n        ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n    ) / SUM(trading_volume) OVER (\n        PARTITION BY ticker \n        ORDER BY date \n        ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n    ) as vwap_20,\n    \n    -- Volume SMA for comparison\n    AVG(trading_volume) OVER (\n        PARTITION BY ticker \n        ORDER BY date \n        ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n    ) as volume_sma_20,\n    \n    -- Volume ratio (current volume vs 20-period average)\n    CASE \n        WHEN AVG(trading_volume) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n        ) = 0 THEN 0\n        ELSE trading_volume / AVG(trading_volume) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n        )\n    END as volume_ratio_20,\n    \n    -- Price vs VWAP\n    CASE \n        WHEN SUM(adjusted_closing_price * trading_volume) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n        ) / SUM(trading_volume) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n        ) = 0 THEN 0\n        ELSE ((adjusted_closing_price - (SUM(adjusted_closing_price * trading_volume) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n        ) / SUM(trading_volume) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n        ))) / (SUM(adjusted_closing_price * trading_volume) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n        ) / SUM(trading_volume) OVER (\n            PARTITION BY ticker \n            ORDER BY date \n            ROWS BETWEEN 19 PRECEDING AND CURRENT ROW\n        ))) * 100\n    END as price_vs_vwap_pct\n\nFROM \"postgres\".\"simfin_dbt\".\"stg_price_data\"", "relation_name": "\"postgres\".\"simfin_dbt\".\"int_vwap_indicators\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-28T14:22:03.769969Z", "completed_at": "2025-08-28T14:22:03.794970Z"}, {"name": "execute", "started_at": "2025-08-28T14:22:03.795952Z", "completed_at": "2025-08-28T14:22:09.139290Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 5.375333309173584, "adapter_response": {"_message": "INSERT 0 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0 0", "failures": null, "unique_id": "model.technical_indicators.consolidated_indicators", "compiled": true, "compiled_code": "\n\n-- Consolidated Technical Indicators\n-- Combines all calculated indicators into one comprehensive table\n-- Uses incremental materialization for efficient processing of new data\n\nWITH sma_data AS (\n    SELECT \n        company_id, company_name, ticker, currency, isin, date,\n        dividend_paid, common_shares_outstanding, last_closing_price,\n        adjusted_closing_price, highest_price, lowest_price, opening_price,\n        trading_volume, daily_range, daily_return_pct,\n        sma_5, sma_10, sma_20, sma_50, sma_200, volume_sma_20\n    FROM \"postgres\".\"simfin_dbt\".\"int_sma_indicators\"\n    \n      WHERE date > (SELECT MAX(date) FROM \"postgres\".\"simfin_dbt\".\"consolidated_indicators\")\n    \n),\nema_data AS (\n    SELECT \n        ticker, date,\n        ema_5, ema_10, ema_12, ema_20, ema_26, ema_50\n    FROM \"postgres\".\"simfin_dbt\".\"int_ema_indicators\"\n    \n      WHERE date > (SELECT MAX(date) FROM \"postgres\".\"simfin_dbt\".\"consolidated_indicators\")\n    \n),\nrsi_data AS (\n    SELECT \n        ticker, date,\n        rsi_7, rsi_14, rsi_21, price_change\n    FROM \"postgres\".\"simfin_dbt\".\"int_rsi_indicators\"\n    \n      WHERE date > (SELECT MAX(date) FROM \"postgres\".\"simfin_dbt\".\"consolidated_indicators\")\n    \n),\nmacd_data AS (\n    SELECT \n        ticker, date,\n        macd_line, macd_signal, macd_histogram, macd_percentage\n    FROM \"postgres\".\"simfin_dbt\".\"int_macd_indicators\"\n    \n      WHERE date > (SELECT MAX(date) FROM \"postgres\".\"simfin_dbt\".\"consolidated_indicators\")\n    \n),\nbb_data AS (\n    SELECT \n        ticker, date,\n        bb_upper_20, bb_middle_20, bb_lower_20, bb_width_20, bb_percent_b_20\n    FROM \"postgres\".\"simfin_dbt\".\"int_bollinger_bands\"\n    \n      WHERE date > (SELECT MAX(date) FROM \"postgres\".\"simfin_dbt\".\"consolidated_indicators\")\n    \n),\nvwap_data AS (\n    SELECT \n        ticker, date,\n        vwap_cumulative, vwap_20, volume_ratio_20, price_vs_vwap_pct\n    FROM \"postgres\".\"simfin_dbt\".\"int_vwap_indicators\"\n    \n      WHERE date > (SELECT MAX(date) FROM \"postgres\".\"simfin_dbt\".\"consolidated_indicators\")\n    \n)\nSELECT \n    -- Base price data (from sma_data since it contains all base columns)\n    s.company_id,\n    s.company_name,\n    s.ticker,\n    s.currency,\n    s.isin,\n    s.date,\n    s.dividend_paid,\n    s.common_shares_outstanding,\n    s.last_closing_price,\n    s.adjusted_closing_price,\n    s.highest_price,\n    s.lowest_price,\n    s.opening_price,\n    s.trading_volume,\n    s.daily_range,\n    s.daily_return_pct,\n    \n    -- SMA indicators\n    s.sma_5,\n    s.sma_10,\n    s.sma_20,\n    s.sma_50,\n    s.sma_200,\n    s.volume_sma_20,\n    \n    -- EMA indicators\n    e.ema_5,\n    e.ema_10,\n    e.ema_12,\n    e.ema_20,\n    e.ema_26,\n    e.ema_50,\n    \n    -- RSI indicators\n    r.rsi_7,\n    r.rsi_14,\n    r.rsi_21,\n    r.price_change,\n    \n    -- MACD indicators\n    m.macd_line,\n    m.macd_signal,\n    m.macd_histogram,\n    m.macd_percentage,\n    \n    -- Bollinger Bands\n    bb.bb_upper_20,\n    bb.bb_middle_20,\n    bb.bb_lower_20,\n    bb.bb_width_20,\n    bb.bb_percent_b_20,\n    \n    -- VWAP indicators\n    v.vwap_cumulative,\n    v.vwap_20,\n    v.volume_ratio_20,\n    v.price_vs_vwap_pct,\n    \n    -- Additional derived indicators\n    -- Price vs moving averages\n    CASE \n        WHEN s.sma_20 = 0 THEN 0\n        ELSE ((s.adjusted_closing_price - s.sma_20) / s.sma_20) * 100\n    END as price_vs_sma_20_pct,\n    \n    CASE \n        WHEN e.ema_20 = 0 THEN 0\n        ELSE ((s.adjusted_closing_price - e.ema_20) / e.ema_20) * 100\n    END as price_vs_ema_20_pct,\n    \n    -- Moving average crossovers\n    CASE \n        WHEN s.sma_20 > s.sma_50 THEN 1\n        WHEN s.sma_20 < s.sma_50 THEN -1\n        ELSE 0\n    END as sma_crossover_signal,\n    \n    CASE \n        WHEN e.ema_12 > e.ema_26 THEN 1\n        WHEN e.ema_12 < e.ema_26 THEN -1\n        ELSE 0\n    END as ema_crossover_signal,\n    \n    -- RSI signals\n    CASE \n        WHEN r.rsi_14 > 70 THEN 'Overbought'\n        WHEN r.rsi_14 < 30 THEN 'Oversold'\n        ELSE 'Neutral'\n    END as rsi_signal,\n    \n    -- MACD signals\n    CASE \n        WHEN m.macd_line > m.macd_signal THEN 'Bullish'\n        WHEN m.macd_line < m.macd_signal THEN 'Bearish'\n        ELSE 'Neutral'\n    END as macd_trading_signal,\n    \n    -- Bollinger Band signals\n    CASE \n        WHEN s.adjusted_closing_price > bb.bb_upper_20 THEN 'Above Upper Band'\n        WHEN s.adjusted_closing_price < bb.bb_lower_20 THEN 'Below Lower Band'\n        ELSE 'Within Bands'\n    END as bb_signal,\n    \n    -- Volume analysis\n    CASE \n        WHEN v.volume_ratio_20 > 1.5 THEN 'High Volume'\n        WHEN v.volume_ratio_20 < 0.5 THEN 'Low Volume'\n        ELSE 'Normal Volume'\n    END as volume_signal\n\nFROM sma_data s\nLEFT JOIN ema_data e ON s.ticker = e.ticker AND s.date = e.date\nLEFT JOIN rsi_data r ON s.ticker = r.ticker AND s.date = r.date\nLEFT JOIN macd_data m ON s.ticker = m.ticker AND s.date = m.date\nLEFT JOIN bb_data bb ON s.ticker = bb.ticker AND s.date = bb.date\nLEFT JOIN vwap_data v ON s.ticker = v.ticker AND s.date = v.date\n\nORDER BY s.ticker, s.date\n\n-- Note: This model uses incremental materialization\n-- - First run: Processes all historical data\n-- - Subsequent runs: Only processes new dates since last run\n-- - Intermediate models are filtered to only include new data for efficiency", "relation_name": "\"postgres\".\"simfin_dbt\".\"consolidated_indicators\"", "batch_results": null}], "elapsed_time": 39.06319546699524, "args": {"validate_macro_args": false, "introspect": true, "warn_error_options": {"error": [], "warn": [], "silence": []}, "state_modified_compare_vars": false, "require_explicit_package_overrides_for_builtin_materializations": true, "vars": {"source_dataset_name": "simfin_dbt"}, "write_json": true, "profile": "postgres", "require_batched_execution_for_custom_microbatch_strategy": false, "project_dir": "C:\\Users\\Administrator\\Downloads\\dom", "static_parser": true, "log_format": "default", "state_modified_compare_more_unrendered_values": false, "require_resource_names_without_spaces": true, "profiles_dir": "C:\\Users\\Administrator\\Downloads\\dom\\.venv\\Lib\\site-packages\\dlt\\helpers\\dbt", "empty": false, "exclude": [], "show_resource_report": false, "indirect_selection": "eager", "require_generic_test_arguments_property": true, "select": [], "log_level_file": "debug", "log_path": "C:\\Users\\Administrator\\Downloads\\dom\\logs", "printer_width": 80, "defer": false, "log_file_max_bytes": 10485760, "populate_cache": true, "require_all_warnings_handled_by_warn_error": false, "strict_mode": false, "log_format_file": "debug", "cache_selected_only": false, "log_level": "info", "require_yaml_configuration_for_mf_time_spines": false, "source_freshness_run_project_hooks": true, "show_all_deprecations": false, "send_anonymous_usage_stats": false, "use_colors_file": true, "use_colors": true, "use_fast_test_edges": false, "which": "run", "favor_state": false, "fail_fast": true, "invocation_command": "dbt ", "version_check": true, "macro_debugging": false, "print": false, "quiet": true, "skip_nodes_if_on_run_start_fails": false, "partial_parse": true, "require_nested_cumulative_type_params": false, "upload_to_artifacts_ingest_api": false, "partial_parse_file_diff": true}}